Name:               vault
Version:            0.3.0.0
Synopsis:           a persistent store for values of arbitrary types
Description:
  A /vault/ is a persistent store for values of arbitrary types.
  It's like having first-class access to the storage space behind IORefs.
  .
  The data structure is analogous to a bank vault,
  where you can access different bank boxes with different keys;
  hence the name.
  .
  Also provided is a /locker/ type, representing a store for a single element.
  
Category:           Data
License:            BSD3
License-file:       LICENSE
Author:             Heinrich Apfelmus, Elliott Hird
Maintainer:         Heinrich Apfelmus <apfelmus at quantentunnel de>
Homepage:           https://github.com/HeinrichApfelmus/vault
Copyright:          (c) Heinrich Apfelmus 2011-2013

build-type:         Simple
cabal-version:      >= 1.6

extra-source-files: Readme.md

source-repository head
    type:           git
    location:       git://github.com/HeinrichApfelmus/vault.git


flag UseGHC
    description: Use GHC-specific packages and extensions.
    default:     True
    
Library
    hs-source-dirs:     src
    build-depends:      base == 4.*, containers >= 0.4 && < 0.6
    if impl(ghc) && flag(UseGHC)
        build-depends:  unordered-containers >= 0.2.1.0 && < 0.3,
                        hashable >= 1.1 && < 1.3 
        CPP-options:    -DUseGHC

    extensions:         CPP
--    ghc-options:        -Wall

    exposed-modules:
                        Data.Vault.Lazy,
                        Data.Vault.Strict,
                        Data.Vault.ST.Lazy,
                        Data.Vault.ST.Strict,
                        Data.Unique.Really
                        
    if impl(ghc) && flag(UseGHC)
        other-modules:
                        Data.Vault.ST.GHC_Lazy,
                        Data.Vault.ST.GHC_Strict
    else
        other-modules:
                        Data.Vault.ST.Pure_Lazy,
                        Data.Vault.ST.Pure_Strict
